# Go for python developers
An introduction to golang for pythonistas

Olivier Roux
Go and Python developer
olivier.roux@deepki.com

## Foreword

Throughout this talk, we'll be talking about Go 1.x and Python 3.x


## Why learn a language that your company is not using?

- It will introduce you to new ways of doing things

- It will give you the bigger picture of the programming languages ecosystem.

- It will make you more desirable on the market.


## What is Go?

Open source programming language designed at Google by pioneers of computer science.

- Ken Thompson (Unix, B, grep, Plan 9, UTF-8)
- Rob Pike (Plan 9, UTF-8)
- Robert Griesemer (JavaScript V8 engine)


## Why Go?

In 2020, Go was the most sought-after programming language.

.image img/sought-after.png


## Why is it so popular?

- Easy to learn *and* easy to master.

- Statically typed, but with a dynamic feel.
  
- Language-level concurrency features.

- Compiled to machine code.

- The compilation is so fast, it feels like an interpreted language.

- Expansive "batteries included" standard library.

- Great tools.


## What is it good for?

- Backend servers (aka cloud applications)

- Tools (docker, kubernetes)


## Hello, world!

.play hello/main.go

As you can see, the syntax is very simple and clean.

Unlike Python, code *must* be in a `main` function if we want to produce an executable.


## Static typing

Go is statically typed. Once a type has been assigned to a variable, it can not be changed.

Many runtime errors in python would be detected as compilation errors in Go.


## Type declaration

.play variables/main.go


## Data types

- Ten types of integers, but you mostly use `int`, which is the same as Python's.

- Two types of floats: `float32` and `float64`.

- Strings are immutable and UTF-8 encoded (same as Python).
  
- Strings are made of `runes`.

- Go's `nil` is a value. Python's `None` has its own type.


## Collections

- Slices can be used like Python's lists. They can grow.

- Maps can be used like Python's dictionaries.

- No sets.

- No tuples.


## Structs

Similar to Python's classes:

- User-defined data types.

- Collection of fields.

- Can have methods attached to them.

No inheritance. Instead, Go uses *composition* to achieve a very similar effect.

(Inheritance = "is a". Composition = "has a").


## Structs

.play struct/main.go


## Pointers

Go pointers work just like C pointers, but safe (no arithmetics allowed).

- In Python, arguments passed to function can sometimes be changed.

- In Go, arguments passed to function can never be changed.

- Arguments can be pointers, which let functions access the underlying memory used by a variable.


## Pointers

.play pointer/main.go


## Errors

Go proverb: "Errors are values".

Functions return errors the same way tey return any other values.

Can be annoying at first.

- Behavior is obvious and predictable.
- No more `except Exception` anti-pattern.
- Your program won't crash unless you explicitly let it.


## Errors

.play error/main.go


## Interfaces

- Same idea as "duck-tying", but explicit.

- Similar to Python's Abstract Base Classes (abc).

- Just a list of methods (don't care about data).

Go proverb: "The bigger the interface, the weaker the abstraction".

Concrete types implement interfaces just by having the right methods.
No knowledge of the interface is necessary.

-> Interfaces can emerge from implementation patterns.


## Interfaces 1/3

.code interface/hero/hero.go


## Interfaces 2/3

.code interface/baby/baby.go


## Interfaces 3/3

.play interface/main.go


## Goroutines

Similar to asyncio's coroutines, but not limited to I/O.

Can share memory.

Very lightweight.


## Goroutines

.play goroutine/main.go


## Channels

Queue-like objects.

Code execution stops on a channel `read` until someone writes into it.

Code execution stops on a channel `write` until someone reads from it.


## Channels

.play channel/main.go


## Generators ?

.play generator/main.go


## Context managers ?

.play defer/main.go

## The zen of Python

.code zen.txt


## Zen is good

This is a nice list!

Go is Zen... often more than Python itself.


## Beautiful is better than ugly

Go has a lightweight, regular syntax reminiscent of C.

It's very familiar for most developers.


## Simple is better than complex

- No class blocks (methods are just functions).
- No magic methods.
- No inheritance.
- No special decorator syntax.
- No named/optional arguments.
- No generators.


## Explicit is better than implicit

- Explicit error handling.
- Explicit definition of abstractions through interfaces.
- Explicit export of names through naming (capitalized means exported).
- Actual constants.


## Flat is better than nested

"Bail early", aka "align the happy path to the left" is idiomatic go code.

.code zen/happy.go


## Flat is better than nested

- Multiple files that comprise one package share one name space.

- No sub-modules.


## Sparse is better than dense

Go syntax does not encourage crazy one-liners

- No list comprehension.
- No ternary operator.

Go proverb: "Clear is better than clever".


## Readability counts

- The gofmt tool enforces "one true style" (No more stupid arguments).

  Proverb: "Gofmt's style is no one's favorite, yet gofmt is everyone's favorite".

- Many language design decisions were made in the name of readability.



## There should be one obvious way to do it

Because of its simplicity, the "right way to do things" in go is often the only way to do things.


## Now is better than never

Learn Go today! It's easy.

- Productive in one day.
- Efficient in one week.
- Expert in one year.

Start with [A Tour of Go](https://tour.golang.org) (half a day)

Then read [Effective Go](https://golang.org/doc/effective_go) (half a day)

[Go by example](https://gobyexample.com)

[Awesome Go](https://github.com/avelino/awesome-go)
